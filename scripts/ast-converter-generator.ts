import { getASTTypes } from './ast-parser';

const types = getASTTypes();

console.log('package com.jaspervanmerle.rascalparser');
console.log();
console.log('import com.github.salomonbrys.kotson.*');
console.log('import com.google.gson.*');
console.log('import org.rascalmpl.ast.*');
console.log('import org.rascalmpl.ast.Char');
console.log('import org.rascalmpl.ast.Target');
console.log();
console.log('// The code in this file automatically generated by scripts/ast-converter-generator.ts');
console.log();
console.log('object ASTConverter : IASTVisitor<JsonObject> {');

for (const parentType in types) {
  for (const subType in types[parentType]) {
    const members = types[parentType][subType].map(member => {
      const methodCall = member.type === 'java.lang.String' ? '' : '.accept(this)';
      return `"${member.name}" to x.${member.name}${methodCall}`;
    });

    console.log(`override fun visit${parentType}${subType}(x: ${parentType}.${subType}): JsonObject {`);
    console.log(`return addMetadata(x, "${parentType}.${subType}", jsonObject(${members.join(', ')}))`);
    console.log('}\n');
  }
}

console.log('private fun addMetadata(x: AbstractAST, type: String, content: JsonObject): JsonObject {');
console.log('content["_type"] = type');
console.log('content["_start"] = x.location.offset');
console.log('content["_end"] = x.location.offset + x.location.length');
console.log('return content');
console.log('}\n');

/**
 * private fun List<AbstractAST>.accept(visitor: IASTVisitor<*>): JsonArray {
    return this.map { it.accept(visitor) }.toJsonArray()
  }
 */

console.log('private fun List<AbstractAST>.accept(visitor: IASTVisitor<*>): JsonArray {');
console.log('return this.map { it.accept(visitor) }.toJsonArray()');
console.log('}');

console.log('}');
