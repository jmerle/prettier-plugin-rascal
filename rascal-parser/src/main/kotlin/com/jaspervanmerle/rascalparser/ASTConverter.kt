package com.jaspervanmerle.rascalparser

import com.github.salomonbrys.kotson.*
import com.google.gson.*
import org.rascalmpl.ast.*
import org.rascalmpl.ast.Char
import org.rascalmpl.ast.Target

// This file is automatically generated by running 'yarn generate:ast-converter'

object ASTConverter : IASTVisitor<JsonObject> {
  override fun visitAssignableAnnotation(x: Assignable.Annotation): JsonObject {
    return addMetadata(x, "Assignable.Annotation", jsonObject("receiver" to x.receiver.accept(this), "annotation" to x.annotation.accept(this)))
  }

  override fun visitAssignableBracket(x: Assignable.Bracket): JsonObject {
    return addMetadata(x, "Assignable.Bracket", jsonObject("arg" to x.arg.accept(this)))
  }

  override fun visitAssignableConstructor(x: Assignable.Constructor): JsonObject {
    return addMetadata(x, "Assignable.Constructor", jsonObject("name" to x.name.accept(this), "arguments" to x.arguments.accept(this)))
  }

  override fun visitAssignableFieldAccess(x: Assignable.FieldAccess): JsonObject {
    return addMetadata(x, "Assignable.FieldAccess", jsonObject("receiver" to x.receiver.accept(this), "field" to x.field.accept(this)))
  }

  override fun visitAssignableIfDefinedOrDefault(x: Assignable.IfDefinedOrDefault): JsonObject {
    return addMetadata(x, "Assignable.IfDefinedOrDefault", jsonObject("receiver" to x.receiver.accept(this), "defaultExpression" to x.defaultExpression.accept(this)))
  }

  override fun visitAssignableSlice(x: Assignable.Slice): JsonObject {
    return addMetadata(x, "Assignable.Slice", jsonObject("receiver" to x.receiver.accept(this), "optFirst" to x.optFirst.accept(this), "optLast" to x.optLast.accept(this)))
  }

  override fun visitAssignableSliceStep(x: Assignable.SliceStep): JsonObject {
    return addMetadata(x, "Assignable.SliceStep", jsonObject("receiver" to x.receiver.accept(this), "optFirst" to x.optFirst.accept(this), "second" to x.second.accept(this), "optLast" to x.optLast.accept(this)))
  }

  override fun visitAssignableSubscript(x: Assignable.Subscript): JsonObject {
    return addMetadata(x, "Assignable.Subscript", jsonObject("receiver" to x.receiver.accept(this), "subscript" to x.subscript.accept(this)))
  }

  override fun visitAssignableTuple(x: Assignable.Tuple): JsonObject {
    return addMetadata(x, "Assignable.Tuple", jsonObject("elements" to x.elements.accept(this)))
  }

  override fun visitAssignableVariable(x: Assignable.Variable): JsonObject {
    return addMetadata(x, "Assignable.Variable", jsonObject("qualifiedName" to x.qualifiedName.accept(this)))
  }

  override fun visitAssignmentAddition(x: Assignment.Addition): JsonObject {
    return addMetadata(x, "Assignment.Addition", jsonObject())
  }

  override fun visitAssignmentAppend(x: Assignment.Append): JsonObject {
    return addMetadata(x, "Assignment.Append", jsonObject())
  }

  override fun visitAssignmentDefault(x: Assignment.Default): JsonObject {
    return addMetadata(x, "Assignment.Default", jsonObject())
  }

  override fun visitAssignmentDivision(x: Assignment.Division): JsonObject {
    return addMetadata(x, "Assignment.Division", jsonObject())
  }

  override fun visitAssignmentIfDefined(x: Assignment.IfDefined): JsonObject {
    return addMetadata(x, "Assignment.IfDefined", jsonObject())
  }

  override fun visitAssignmentIntersection(x: Assignment.Intersection): JsonObject {
    return addMetadata(x, "Assignment.Intersection", jsonObject())
  }

  override fun visitAssignmentProduct(x: Assignment.Product): JsonObject {
    return addMetadata(x, "Assignment.Product", jsonObject())
  }

  override fun visitAssignmentSubtraction(x: Assignment.Subtraction): JsonObject {
    return addMetadata(x, "Assignment.Subtraction", jsonObject())
  }

  override fun visitAssocAssociative(x: Assoc.Associative): JsonObject {
    return addMetadata(x, "Assoc.Associative", jsonObject())
  }

  override fun visitAssocLeft(x: Assoc.Left): JsonObject {
    return addMetadata(x, "Assoc.Left", jsonObject())
  }

  override fun visitAssocNonAssociative(x: Assoc.NonAssociative): JsonObject {
    return addMetadata(x, "Assoc.NonAssociative", jsonObject())
  }

  override fun visitAssocRight(x: Assoc.Right): JsonObject {
    return addMetadata(x, "Assoc.Right", jsonObject())
  }

  override fun visitBackslashLexical(x: Backslash.Lexical): JsonObject {
    return addMetadata(x, "Backslash.Lexical", jsonObject("string" to x.string))
  }

  override fun visitBasicTypeBag(x: BasicType.Bag): JsonObject {
    return addMetadata(x, "BasicType.Bag", jsonObject())
  }

  override fun visitBasicTypeBool(x: BasicType.Bool): JsonObject {
    return addMetadata(x, "BasicType.Bool", jsonObject())
  }

  override fun visitBasicTypeDateTime(x: BasicType.DateTime): JsonObject {
    return addMetadata(x, "BasicType.DateTime", jsonObject())
  }

  override fun visitBasicTypeInt(x: BasicType.Int): JsonObject {
    return addMetadata(x, "BasicType.Int", jsonObject())
  }

  override fun visitBasicTypeList(x: BasicType.List): JsonObject {
    return addMetadata(x, "BasicType.List", jsonObject())
  }

  override fun visitBasicTypeListRelation(x: BasicType.ListRelation): JsonObject {
    return addMetadata(x, "BasicType.ListRelation", jsonObject())
  }

  override fun visitBasicTypeLoc(x: BasicType.Loc): JsonObject {
    return addMetadata(x, "BasicType.Loc", jsonObject())
  }

  override fun visitBasicTypeMap(x: BasicType.Map): JsonObject {
    return addMetadata(x, "BasicType.Map", jsonObject())
  }

  override fun visitBasicTypeNode(x: BasicType.Node): JsonObject {
    return addMetadata(x, "BasicType.Node", jsonObject())
  }

  override fun visitBasicTypeNum(x: BasicType.Num): JsonObject {
    return addMetadata(x, "BasicType.Num", jsonObject())
  }

  override fun visitBasicTypeRational(x: BasicType.Rational): JsonObject {
    return addMetadata(x, "BasicType.Rational", jsonObject())
  }

  override fun visitBasicTypeReal(x: BasicType.Real): JsonObject {
    return addMetadata(x, "BasicType.Real", jsonObject())
  }

  override fun visitBasicTypeRelation(x: BasicType.Relation): JsonObject {
    return addMetadata(x, "BasicType.Relation", jsonObject())
  }

  override fun visitBasicTypeSet(x: BasicType.Set): JsonObject {
    return addMetadata(x, "BasicType.Set", jsonObject())
  }

  override fun visitBasicTypeString(x: BasicType.String): JsonObject {
    return addMetadata(x, "BasicType.String", jsonObject())
  }

  override fun visitBasicTypeTuple(x: BasicType.Tuple): JsonObject {
    return addMetadata(x, "BasicType.Tuple", jsonObject())
  }

  override fun visitBasicTypeType(x: BasicType.Type): JsonObject {
    return addMetadata(x, "BasicType.Type", jsonObject())
  }

  override fun visitBasicTypeValue(x: BasicType.Value): JsonObject {
    return addMetadata(x, "BasicType.Value", jsonObject())
  }

  override fun visitBasicTypeVoid(x: BasicType.Void): JsonObject {
    return addMetadata(x, "BasicType.Void", jsonObject())
  }

  override fun visitBodyToplevels(x: Body.Toplevels): JsonObject {
    return addMetadata(x, "Body.Toplevels", jsonObject("toplevels" to x.toplevels.accept(this)))
  }

  override fun visitBooleanLiteralLexical(x: BooleanLiteral.Lexical): JsonObject {
    return addMetadata(x, "BooleanLiteral.Lexical", jsonObject("string" to x.string))
  }

  override fun visitBoundDefault(x: Bound.Default): JsonObject {
    return addMetadata(x, "Bound.Default", jsonObject("expression" to x.expression.accept(this)))
  }

  override fun visitBoundEmpty(x: Bound.Empty): JsonObject {
    return addMetadata(x, "Bound.Empty", jsonObject())
  }

  override fun visitCaseDefault(x: Case.Default): JsonObject {
    return addMetadata(x, "Case.Default", jsonObject("statement" to x.statement.accept(this)))
  }

  override fun visitCasePatternWithAction(x: Case.PatternWithAction): JsonObject {
    return addMetadata(x, "Case.PatternWithAction", jsonObject("patternWithAction" to x.patternWithAction.accept(this)))
  }

  override fun visitCaseInsensitiveStringConstantLexical(x: CaseInsensitiveStringConstant.Lexical): JsonObject {
    return addMetadata(x, "CaseInsensitiveStringConstant.Lexical", jsonObject("string" to x.string))
  }

  override fun visitCatchBinding(x: Catch.Binding): JsonObject {
    return addMetadata(x, "Catch.Binding", jsonObject("pattern" to x.pattern.accept(this), "body" to x.body.accept(this)))
  }

  override fun visitCatchDefault(x: Catch.Default): JsonObject {
    return addMetadata(x, "Catch.Default", jsonObject("body" to x.body.accept(this)))
  }

  override fun visitCharLexical(x: Char.Lexical): JsonObject {
    return addMetadata(x, "Char.Lexical", jsonObject("string" to x.string))
  }

  override fun visitClassBracket(x: Class.Bracket): JsonObject {
    return addMetadata(x, "Class.Bracket", jsonObject("charClass" to x.charClass.accept(this)))
  }

  override fun visitClassComplement(x: Class.Complement): JsonObject {
    return addMetadata(x, "Class.Complement", jsonObject("charClass" to x.charClass.accept(this)))
  }

  override fun visitClassDifference(x: Class.Difference): JsonObject {
    return addMetadata(x, "Class.Difference", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitClassIntersection(x: Class.Intersection): JsonObject {
    return addMetadata(x, "Class.Intersection", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitClassSimpleCharclass(x: Class.SimpleCharclass): JsonObject {
    return addMetadata(x, "Class.SimpleCharclass", jsonObject("ranges" to x.ranges.accept(this)))
  }

  override fun visitClassUnion(x: Class.Union): JsonObject {
    return addMetadata(x, "Class.Union", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitCommandDeclaration(x: Command.Declaration): JsonObject {
    return addMetadata(x, "Command.Declaration", jsonObject("declaration" to x.declaration.accept(this)))
  }

  override fun visitCommandExpression(x: Command.Expression): JsonObject {
    return addMetadata(x, "Command.Expression", jsonObject("expression" to x.expression.accept(this)))
  }

  override fun visitCommandImport(x: Command.Import): JsonObject {
    return addMetadata(x, "Command.Import", jsonObject("imported" to x.imported.accept(this)))
  }

  override fun visitCommandShell(x: Command.Shell): JsonObject {
    return addMetadata(x, "Command.Shell", jsonObject("command" to x.command.accept(this)))
  }

  override fun visitCommandStatement(x: Command.Statement): JsonObject {
    return addMetadata(x, "Command.Statement", jsonObject("statement" to x.statement.accept(this)))
  }

  override fun visitCommandsCommandlist(x: Commands.Commandlist): JsonObject {
    return addMetadata(x, "Commands.Commandlist", jsonObject("commands" to x.commands.accept(this)))
  }

  override fun visitCommentLexical(x: Comment.Lexical): JsonObject {
    return addMetadata(x, "Comment.Lexical", jsonObject("string" to x.string))
  }

  override fun visitCommonKeywordParametersAbsent(x: CommonKeywordParameters.Absent): JsonObject {
    return addMetadata(x, "CommonKeywordParameters.Absent", jsonObject())
  }

  override fun visitCommonKeywordParametersPresent(x: CommonKeywordParameters.Present): JsonObject {
    return addMetadata(x, "CommonKeywordParameters.Present", jsonObject("keywordFormalList" to x.keywordFormalList.accept(this)))
  }

  override fun visitComprehensionList(x: Comprehension.List): JsonObject {
    return addMetadata(x, "Comprehension.List", jsonObject("results" to x.results.accept(this), "generators" to x.generators.accept(this)))
  }

  override fun visitComprehensionMap(x: Comprehension.Map): JsonObject {
    return addMetadata(x, "Comprehension.Map", jsonObject("from" to x.from.accept(this), "to" to x.to.accept(this), "generators" to x.generators.accept(this)))
  }

  override fun visitComprehensionSet(x: Comprehension.Set): JsonObject {
    return addMetadata(x, "Comprehension.Set", jsonObject("results" to x.results.accept(this), "generators" to x.generators.accept(this)))
  }

  override fun visitConcreteLexical(x: Concrete.Lexical): JsonObject {
    return addMetadata(x, "Concrete.Lexical", jsonObject("string" to x.string))
  }

  override fun visitConcreteHoleOne(x: ConcreteHole.One): JsonObject {
    return addMetadata(x, "ConcreteHole.One", jsonObject("symbol" to x.symbol.accept(this), "name" to x.name.accept(this)))
  }

  override fun visitConcretePartLexical(x: ConcretePart.Lexical): JsonObject {
    return addMetadata(x, "ConcretePart.Lexical", jsonObject("string" to x.string))
  }

  override fun visitDataTargetEmpty(x: DataTarget.Empty): JsonObject {
    return addMetadata(x, "DataTarget.Empty", jsonObject())
  }

  override fun visitDataTargetLabeled(x: DataTarget.Labeled): JsonObject {
    return addMetadata(x, "DataTarget.Labeled", jsonObject("label" to x.label.accept(this)))
  }

  override fun visitDataTypeSelectorSelector(x: DataTypeSelector.Selector): JsonObject {
    return addMetadata(x, "DataTypeSelector.Selector", jsonObject("sort" to x.sort.accept(this), "production" to x.production.accept(this)))
  }

  override fun visitDateAndTimeLexical(x: DateAndTime.Lexical): JsonObject {
    return addMetadata(x, "DateAndTime.Lexical", jsonObject("string" to x.string))
  }

  override fun visitDatePartLexical(x: DatePart.Lexical): JsonObject {
    return addMetadata(x, "DatePart.Lexical", jsonObject("string" to x.string))
  }

  override fun visitDateTimeLiteralDateAndTimeLiteral(x: DateTimeLiteral.DateAndTimeLiteral): JsonObject {
    return addMetadata(x, "DateTimeLiteral.DateAndTimeLiteral", jsonObject("dateAndTime" to x.dateAndTime.accept(this)))
  }

  override fun visitDateTimeLiteralDateLiteral(x: DateTimeLiteral.DateLiteral): JsonObject {
    return addMetadata(x, "DateTimeLiteral.DateLiteral", jsonObject("date" to x.date.accept(this)))
  }

  override fun visitDateTimeLiteralTimeLiteral(x: DateTimeLiteral.TimeLiteral): JsonObject {
    return addMetadata(x, "DateTimeLiteral.TimeLiteral", jsonObject("time" to x.time.accept(this)))
  }

  override fun visitDecimalIntegerLiteralLexical(x: DecimalIntegerLiteral.Lexical): JsonObject {
    return addMetadata(x, "DecimalIntegerLiteral.Lexical", jsonObject("string" to x.string))
  }

  override fun visitDeclarationAlias(x: Declaration.Alias): JsonObject {
    return addMetadata(x, "Declaration.Alias", jsonObject("tags" to x.tags.accept(this), "visibility" to x.visibility.accept(this), "user" to x.user.accept(this), "base" to x.base.accept(this)))
  }

  override fun visitDeclarationAnnotation(x: Declaration.Annotation): JsonObject {
    return addMetadata(x, "Declaration.Annotation", jsonObject("tags" to x.tags.accept(this), "visibility" to x.visibility.accept(this), "annoType" to x.annoType.accept(this), "onType" to x.onType.accept(this), "name" to x.name.accept(this)))
  }

  override fun visitDeclarationData(x: Declaration.Data): JsonObject {
    return addMetadata(x, "Declaration.Data", jsonObject("tags" to x.tags.accept(this), "visibility" to x.visibility.accept(this), "user" to x.user.accept(this), "commonKeywordParameters" to x.commonKeywordParameters.accept(this), "variants" to x.variants.accept(this)))
  }

  override fun visitDeclarationDataAbstract(x: Declaration.DataAbstract): JsonObject {
    return addMetadata(x, "Declaration.DataAbstract", jsonObject("tags" to x.tags.accept(this), "visibility" to x.visibility.accept(this), "user" to x.user.accept(this), "commonKeywordParameters" to x.commonKeywordParameters.accept(this)))
  }

  override fun visitDeclarationFunction(x: Declaration.Function): JsonObject {
    return addMetadata(x, "Declaration.Function", jsonObject("functionDeclaration" to x.functionDeclaration.accept(this)))
  }

  override fun visitDeclarationTag(x: Declaration.Tag): JsonObject {
    return addMetadata(x, "Declaration.Tag", jsonObject("tags" to x.tags.accept(this), "visibility" to x.visibility.accept(this), "kind" to x.kind.accept(this), "name" to x.name.accept(this), "types" to x.types.accept(this)))
  }

  override fun visitDeclarationVariable(x: Declaration.Variable): JsonObject {
    return addMetadata(x, "Declaration.Variable", jsonObject("tags" to x.tags.accept(this), "visibility" to x.visibility.accept(this), "type" to x.type.accept(this), "variables" to x.variables.accept(this)))
  }

  override fun visitDeclaratorDefault(x: Declarator.Default): JsonObject {
    return addMetadata(x, "Declarator.Default", jsonObject("type" to x.type.accept(this), "variables" to x.variables.accept(this)))
  }

  override fun visitEvalCommandDeclaration(x: EvalCommand.Declaration): JsonObject {
    return addMetadata(x, "EvalCommand.Declaration", jsonObject("declaration" to x.declaration.accept(this)))
  }

  override fun visitEvalCommandImport(x: EvalCommand.Import): JsonObject {
    return addMetadata(x, "EvalCommand.Import", jsonObject("imported" to x.imported.accept(this)))
  }

  override fun visitEvalCommandOutput(x: EvalCommand.Output): JsonObject {
    return addMetadata(x, "EvalCommand.Output", jsonObject())
  }

  override fun visitEvalCommandStatement(x: EvalCommand.Statement): JsonObject {
    return addMetadata(x, "EvalCommand.Statement", jsonObject("statement" to x.statement.accept(this)))
  }

  override fun visitExpressionAddition(x: Expression.Addition): JsonObject {
    return addMetadata(x, "Expression.Addition", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionAll(x: Expression.All): JsonObject {
    return addMetadata(x, "Expression.All", jsonObject("generators" to x.generators.accept(this)))
  }

  override fun visitExpressionAnd(x: Expression.And): JsonObject {
    return addMetadata(x, "Expression.And", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionAnti(x: Expression.Anti): JsonObject {
    return addMetadata(x, "Expression.Anti", jsonObject("pattern" to x.pattern.accept(this)))
  }

  override fun visitExpressionAny(x: Expression.Any): JsonObject {
    return addMetadata(x, "Expression.Any", jsonObject("generators" to x.generators.accept(this)))
  }

  override fun visitExpressionAppendAfter(x: Expression.AppendAfter): JsonObject {
    return addMetadata(x, "Expression.AppendAfter", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionAsType(x: Expression.AsType): JsonObject {
    return addMetadata(x, "Expression.AsType", jsonObject("type" to x.type.accept(this), "argument" to x.argument.accept(this)))
  }

  override fun visitExpressionBracket(x: Expression.Bracket): JsonObject {
    return addMetadata(x, "Expression.Bracket", jsonObject("expression" to x.expression.accept(this)))
  }

  override fun visitExpressionCallOrTree(x: Expression.CallOrTree): JsonObject {
    return addMetadata(x, "Expression.CallOrTree", jsonObject("expression" to x.expression.accept(this), "arguments" to x.arguments.accept(this), "keywordArguments" to x.keywordArguments.accept(this)))
  }

  override fun visitExpressionClosure(x: Expression.Closure): JsonObject {
    return addMetadata(x, "Expression.Closure", jsonObject("type" to x.type.accept(this), "parameters" to x.parameters.accept(this), "statements" to x.statements.accept(this)))
  }

  override fun visitExpressionComposition(x: Expression.Composition): JsonObject {
    return addMetadata(x, "Expression.Composition", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionComprehension(x: Expression.Comprehension): JsonObject {
    return addMetadata(x, "Expression.Comprehension", jsonObject("comprehension" to x.comprehension.accept(this)))
  }

  override fun visitExpressionConcrete(x: Expression.Concrete): JsonObject {
    return addMetadata(x, "Expression.Concrete", jsonObject("concrete" to x.concrete.accept(this)))
  }

  override fun visitExpressionDescendant(x: Expression.Descendant): JsonObject {
    return addMetadata(x, "Expression.Descendant", jsonObject("pattern" to x.pattern.accept(this)))
  }

  override fun visitExpressionDivision(x: Expression.Division): JsonObject {
    return addMetadata(x, "Expression.Division", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionEnumerator(x: Expression.Enumerator): JsonObject {
    return addMetadata(x, "Expression.Enumerator", jsonObject("pattern" to x.pattern.accept(this), "expression" to x.expression.accept(this)))
  }

  override fun visitExpressionEquals(x: Expression.Equals): JsonObject {
    return addMetadata(x, "Expression.Equals", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionEquivalence(x: Expression.Equivalence): JsonObject {
    return addMetadata(x, "Expression.Equivalence", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionFieldAccess(x: Expression.FieldAccess): JsonObject {
    return addMetadata(x, "Expression.FieldAccess", jsonObject("expression" to x.expression.accept(this), "field" to x.field.accept(this)))
  }

  override fun visitExpressionFieldProject(x: Expression.FieldProject): JsonObject {
    return addMetadata(x, "Expression.FieldProject", jsonObject("expression" to x.expression.accept(this), "fields" to x.fields.accept(this)))
  }

  override fun visitExpressionFieldUpdate(x: Expression.FieldUpdate): JsonObject {
    return addMetadata(x, "Expression.FieldUpdate", jsonObject("expression" to x.expression.accept(this), "key" to x.key.accept(this), "replacement" to x.replacement.accept(this)))
  }

  override fun visitExpressionGetAnnotation(x: Expression.GetAnnotation): JsonObject {
    return addMetadata(x, "Expression.GetAnnotation", jsonObject("expression" to x.expression.accept(this), "name" to x.name.accept(this)))
  }

  override fun visitExpressionGreaterThan(x: Expression.GreaterThan): JsonObject {
    return addMetadata(x, "Expression.GreaterThan", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionGreaterThanOrEq(x: Expression.GreaterThanOrEq): JsonObject {
    return addMetadata(x, "Expression.GreaterThanOrEq", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionHas(x: Expression.Has): JsonObject {
    return addMetadata(x, "Expression.Has", jsonObject("expression" to x.expression.accept(this), "name" to x.name.accept(this)))
  }

  override fun visitExpressionIfDefinedOtherwise(x: Expression.IfDefinedOtherwise): JsonObject {
    return addMetadata(x, "Expression.IfDefinedOtherwise", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionIfThenElse(x: Expression.IfThenElse): JsonObject {
    return addMetadata(x, "Expression.IfThenElse", jsonObject("condition" to x.condition.accept(this), "thenExp" to x.thenExp.accept(this), "elseExp" to x.elseExp.accept(this)))
  }

  override fun visitExpressionImplication(x: Expression.Implication): JsonObject {
    return addMetadata(x, "Expression.Implication", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionIn(x: Expression.In): JsonObject {
    return addMetadata(x, "Expression.In", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionInsertBefore(x: Expression.InsertBefore): JsonObject {
    return addMetadata(x, "Expression.InsertBefore", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionIntersection(x: Expression.Intersection): JsonObject {
    return addMetadata(x, "Expression.Intersection", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionIs(x: Expression.Is): JsonObject {
    return addMetadata(x, "Expression.Is", jsonObject("expression" to x.expression.accept(this), "name" to x.name.accept(this)))
  }

  override fun visitExpressionIsDefined(x: Expression.IsDefined): JsonObject {
    return addMetadata(x, "Expression.IsDefined", jsonObject("argument" to x.argument.accept(this)))
  }

  override fun visitExpressionIt(x: Expression.It): JsonObject {
    return addMetadata(x, "Expression.It", jsonObject())
  }

  override fun visitExpressionJoin(x: Expression.Join): JsonObject {
    return addMetadata(x, "Expression.Join", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionLessThan(x: Expression.LessThan): JsonObject {
    return addMetadata(x, "Expression.LessThan", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionLessThanOrEq(x: Expression.LessThanOrEq): JsonObject {
    return addMetadata(x, "Expression.LessThanOrEq", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionList(x: Expression.List): JsonObject {
    return addMetadata(x, "Expression.List", jsonObject("elements0" to x.elements0.accept(this)))
  }

  override fun visitExpressionLiteral(x: Expression.Literal): JsonObject {
    return addMetadata(x, "Expression.Literal", jsonObject("literal" to x.literal.accept(this)))
  }

  override fun visitExpressionMap(x: Expression.Map): JsonObject {
    return addMetadata(x, "Expression.Map", jsonObject("mappings" to x.mappings.accept(this)))
  }

  override fun visitExpressionMatch(x: Expression.Match): JsonObject {
    return addMetadata(x, "Expression.Match", jsonObject("pattern" to x.pattern.accept(this), "expression" to x.expression.accept(this)))
  }

  override fun visitExpressionModulo(x: Expression.Modulo): JsonObject {
    return addMetadata(x, "Expression.Modulo", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionMultiVariable(x: Expression.MultiVariable): JsonObject {
    return addMetadata(x, "Expression.MultiVariable", jsonObject("qualifiedName" to x.qualifiedName.accept(this)))
  }

  override fun visitExpressionNegation(x: Expression.Negation): JsonObject {
    return addMetadata(x, "Expression.Negation", jsonObject("argument" to x.argument.accept(this)))
  }

  override fun visitExpressionNegative(x: Expression.Negative): JsonObject {
    return addMetadata(x, "Expression.Negative", jsonObject("argument" to x.argument.accept(this)))
  }

  override fun visitExpressionNoMatch(x: Expression.NoMatch): JsonObject {
    return addMetadata(x, "Expression.NoMatch", jsonObject("pattern" to x.pattern.accept(this), "expression" to x.expression.accept(this)))
  }

  override fun visitExpressionNonEmptyBlock(x: Expression.NonEmptyBlock): JsonObject {
    return addMetadata(x, "Expression.NonEmptyBlock", jsonObject("statements" to x.statements.accept(this)))
  }

  override fun visitExpressionNonEquals(x: Expression.NonEquals): JsonObject {
    return addMetadata(x, "Expression.NonEquals", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionNotIn(x: Expression.NotIn): JsonObject {
    return addMetadata(x, "Expression.NotIn", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionOr(x: Expression.Or): JsonObject {
    return addMetadata(x, "Expression.Or", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionProduct(x: Expression.Product): JsonObject {
    return addMetadata(x, "Expression.Product", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionQualifiedName(x: Expression.QualifiedName): JsonObject {
    return addMetadata(x, "Expression.QualifiedName", jsonObject("qualifiedName" to x.qualifiedName.accept(this)))
  }

  override fun visitExpressionRange(x: Expression.Range): JsonObject {
    return addMetadata(x, "Expression.Range", jsonObject("first" to x.first.accept(this), "last" to x.last.accept(this)))
  }

  override fun visitExpressionReducer(x: Expression.Reducer): JsonObject {
    return addMetadata(x, "Expression.Reducer", jsonObject("init" to x.init.accept(this), "result" to x.result.accept(this), "generators" to x.generators.accept(this)))
  }

  override fun visitExpressionReifiedType(x: Expression.ReifiedType): JsonObject {
    return addMetadata(x, "Expression.ReifiedType", jsonObject("symbol" to x.symbol.accept(this), "definitions" to x.definitions.accept(this)))
  }

  override fun visitExpressionReifyType(x: Expression.ReifyType): JsonObject {
    return addMetadata(x, "Expression.ReifyType", jsonObject("type" to x.type.accept(this)))
  }

  override fun visitExpressionRemainder(x: Expression.Remainder): JsonObject {
    return addMetadata(x, "Expression.Remainder", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionSet(x: Expression.Set): JsonObject {
    return addMetadata(x, "Expression.Set", jsonObject("elements0" to x.elements0.accept(this)))
  }

  override fun visitExpressionSetAnnotation(x: Expression.SetAnnotation): JsonObject {
    return addMetadata(x, "Expression.SetAnnotation", jsonObject("expression" to x.expression.accept(this), "name" to x.name.accept(this), "value" to x.value.accept(this)))
  }

  override fun visitExpressionSlice(x: Expression.Slice): JsonObject {
    return addMetadata(x, "Expression.Slice", jsonObject("expression" to x.expression.accept(this), "optFirst" to x.optFirst.accept(this), "optLast" to x.optLast.accept(this)))
  }

  override fun visitExpressionSliceStep(x: Expression.SliceStep): JsonObject {
    return addMetadata(x, "Expression.SliceStep", jsonObject("expression" to x.expression.accept(this), "optFirst" to x.optFirst.accept(this), "second" to x.second.accept(this), "optLast" to x.optLast.accept(this)))
  }

  override fun visitExpressionSplice(x: Expression.Splice): JsonObject {
    return addMetadata(x, "Expression.Splice", jsonObject("argument" to x.argument.accept(this)))
  }

  override fun visitExpressionSplicePlus(x: Expression.SplicePlus): JsonObject {
    return addMetadata(x, "Expression.SplicePlus", jsonObject("argument" to x.argument.accept(this)))
  }

  override fun visitExpressionStepRange(x: Expression.StepRange): JsonObject {
    return addMetadata(x, "Expression.StepRange", jsonObject("first" to x.first.accept(this), "second" to x.second.accept(this), "last" to x.last.accept(this)))
  }

  override fun visitExpressionSubscript(x: Expression.Subscript): JsonObject {
    return addMetadata(x, "Expression.Subscript", jsonObject("expression" to x.expression.accept(this), "subscripts" to x.subscripts.accept(this)))
  }

  override fun visitExpressionSubtraction(x: Expression.Subtraction): JsonObject {
    return addMetadata(x, "Expression.Subtraction", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitExpressionTransitiveClosure(x: Expression.TransitiveClosure): JsonObject {
    return addMetadata(x, "Expression.TransitiveClosure", jsonObject("argument" to x.argument.accept(this)))
  }

  override fun visitExpressionTransitiveReflexiveClosure(x: Expression.TransitiveReflexiveClosure): JsonObject {
    return addMetadata(x, "Expression.TransitiveReflexiveClosure", jsonObject("argument" to x.argument.accept(this)))
  }

  override fun visitExpressionTuple(x: Expression.Tuple): JsonObject {
    return addMetadata(x, "Expression.Tuple", jsonObject("elements" to x.elements.accept(this)))
  }

  override fun visitExpressionTypedVariable(x: Expression.TypedVariable): JsonObject {
    return addMetadata(x, "Expression.TypedVariable", jsonObject("type" to x.type.accept(this), "name" to x.name.accept(this)))
  }

  override fun visitExpressionTypedVariableBecomes(x: Expression.TypedVariableBecomes): JsonObject {
    return addMetadata(x, "Expression.TypedVariableBecomes", jsonObject("type" to x.type.accept(this), "name" to x.name.accept(this), "pattern" to x.pattern.accept(this)))
  }

  override fun visitExpressionVariableBecomes(x: Expression.VariableBecomes): JsonObject {
    return addMetadata(x, "Expression.VariableBecomes", jsonObject("name" to x.name.accept(this), "pattern" to x.pattern.accept(this)))
  }

  override fun visitExpressionVisit(x: Expression.Visit): JsonObject {
    return addMetadata(x, "Expression.Visit", jsonObject("label" to x.label.accept(this), "visit" to x.visit.accept(this)))
  }

  override fun visitExpressionVoidClosure(x: Expression.VoidClosure): JsonObject {
    return addMetadata(x, "Expression.VoidClosure", jsonObject("parameters" to x.parameters.accept(this), "statements0" to x.statements0.accept(this)))
  }

  override fun visitFieldIndex(x: Field.Index): JsonObject {
    return addMetadata(x, "Field.Index", jsonObject("fieldIndex" to x.fieldIndex.accept(this)))
  }

  override fun visitFieldName(x: Field.Name): JsonObject {
    return addMetadata(x, "Field.Name", jsonObject("fieldName" to x.fieldName.accept(this)))
  }

  override fun visitFormalsDefault(x: Formals.Default): JsonObject {
    return addMetadata(x, "Formals.Default", jsonObject("formals" to x.formals.accept(this)))
  }

  override fun visitFunctionBodyDefault(x: FunctionBody.Default): JsonObject {
    return addMetadata(x, "FunctionBody.Default", jsonObject("statements" to x.statements.accept(this)))
  }

  override fun visitFunctionDeclarationAbstract(x: FunctionDeclaration.Abstract): JsonObject {
    return addMetadata(x, "FunctionDeclaration.Abstract", jsonObject("tags" to x.tags.accept(this), "visibility" to x.visibility.accept(this), "signature" to x.signature.accept(this)))
  }

  override fun visitFunctionDeclarationConditional(x: FunctionDeclaration.Conditional): JsonObject {
    return addMetadata(x, "FunctionDeclaration.Conditional", jsonObject("tags" to x.tags.accept(this), "visibility" to x.visibility.accept(this), "signature" to x.signature.accept(this), "expression" to x.expression.accept(this), "conditions" to x.conditions.accept(this)))
  }

  override fun visitFunctionDeclarationDefault(x: FunctionDeclaration.Default): JsonObject {
    return addMetadata(x, "FunctionDeclaration.Default", jsonObject("tags" to x.tags.accept(this), "visibility" to x.visibility.accept(this), "signature" to x.signature.accept(this), "body" to x.body.accept(this)))
  }

  override fun visitFunctionDeclarationExpression(x: FunctionDeclaration.Expression): JsonObject {
    return addMetadata(x, "FunctionDeclaration.Expression", jsonObject("tags" to x.tags.accept(this), "visibility" to x.visibility.accept(this), "signature" to x.signature.accept(this), "expression" to x.expression.accept(this)))
  }

  override fun visitFunctionModifierDefault(x: FunctionModifier.Default): JsonObject {
    return addMetadata(x, "FunctionModifier.Default", jsonObject())
  }

  override fun visitFunctionModifierJava(x: FunctionModifier.Java): JsonObject {
    return addMetadata(x, "FunctionModifier.Java", jsonObject())
  }

  override fun visitFunctionModifierTest(x: FunctionModifier.Test): JsonObject {
    return addMetadata(x, "FunctionModifier.Test", jsonObject())
  }

  override fun visitFunctionModifiersModifierlist(x: FunctionModifiers.Modifierlist): JsonObject {
    return addMetadata(x, "FunctionModifiers.Modifierlist", jsonObject("modifiers" to x.modifiers.accept(this)))
  }

  override fun visitFunctionTypeTypeArguments(x: FunctionType.TypeArguments): JsonObject {
    return addMetadata(x, "FunctionType.TypeArguments", jsonObject("type" to x.type.accept(this), "arguments" to x.arguments.accept(this)))
  }

  override fun visitHeaderDefault(x: Header.Default): JsonObject {
    return addMetadata(x, "Header.Default", jsonObject("tags" to x.tags.accept(this), "name" to x.name.accept(this), "imports" to x.imports.accept(this)))
  }

  override fun visitHeaderParameters(x: Header.Parameters): JsonObject {
    return addMetadata(x, "Header.Parameters", jsonObject("tags" to x.tags.accept(this), "name" to x.name.accept(this), "params" to x.params.accept(this), "imports" to x.imports.accept(this)))
  }

  override fun visitHexIntegerLiteralLexical(x: HexIntegerLiteral.Lexical): JsonObject {
    return addMetadata(x, "HexIntegerLiteral.Lexical", jsonObject("string" to x.string))
  }

  override fun visitImportDefault(x: Import.Default): JsonObject {
    return addMetadata(x, "Import.Default", jsonObject("module" to x.module.accept(this)))
  }

  override fun visitImportExtend(x: Import.Extend): JsonObject {
    return addMetadata(x, "Import.Extend", jsonObject("module" to x.module.accept(this)))
  }

  override fun visitImportExternal(x: Import.External): JsonObject {
    return addMetadata(x, "Import.External", jsonObject("name" to x.name.accept(this), "at" to x.at.accept(this)))
  }

  override fun visitImportSyntax(x: Import.Syntax): JsonObject {
    return addMetadata(x, "Import.Syntax", jsonObject("syntax" to x.syntax.accept(this)))
  }

  override fun visitImportedModuleActuals(x: ImportedModule.Actuals): JsonObject {
    return addMetadata(x, "ImportedModule.Actuals", jsonObject("name" to x.name.accept(this), "actuals" to x.actuals.accept(this)))
  }

  override fun visitImportedModuleActualsRenaming(x: ImportedModule.ActualsRenaming): JsonObject {
    return addMetadata(x, "ImportedModule.ActualsRenaming", jsonObject("name" to x.name.accept(this), "actuals" to x.actuals.accept(this), "renamings" to x.renamings.accept(this)))
  }

  override fun visitImportedModuleDefault(x: ImportedModule.Default): JsonObject {
    return addMetadata(x, "ImportedModule.Default", jsonObject("name" to x.name.accept(this)))
  }

  override fun visitImportedModuleRenamings(x: ImportedModule.Renamings): JsonObject {
    return addMetadata(x, "ImportedModule.Renamings", jsonObject("name" to x.name.accept(this), "renamings" to x.renamings.accept(this)))
  }

  override fun visitIntegerLiteralDecimalIntegerLiteral(x: IntegerLiteral.DecimalIntegerLiteral): JsonObject {
    return addMetadata(x, "IntegerLiteral.DecimalIntegerLiteral", jsonObject("decimal" to x.decimal.accept(this)))
  }

  override fun visitIntegerLiteralHexIntegerLiteral(x: IntegerLiteral.HexIntegerLiteral): JsonObject {
    return addMetadata(x, "IntegerLiteral.HexIntegerLiteral", jsonObject("hex" to x.hex.accept(this)))
  }

  override fun visitIntegerLiteralOctalIntegerLiteral(x: IntegerLiteral.OctalIntegerLiteral): JsonObject {
    return addMetadata(x, "IntegerLiteral.OctalIntegerLiteral", jsonObject("octal" to x.octal.accept(this)))
  }

  override fun visitJustDateLexical(x: JustDate.Lexical): JsonObject {
    return addMetadata(x, "JustDate.Lexical", jsonObject("string" to x.string))
  }

  override fun visitJustTimeLexical(x: JustTime.Lexical): JsonObject {
    return addMetadata(x, "JustTime.Lexical", jsonObject("string" to x.string))
  }

  override fun visitKeywordArgument_ExpressionDefault(x: KeywordArgument_Expression.Default): JsonObject {
    return addMetadata(x, "KeywordArgument_Expression.Default", jsonObject("name" to x.name.accept(this), "expression" to x.expression.accept(this)))
  }

  override fun visitKeywordArguments_ExpressionDefault(x: KeywordArguments_Expression.Default): JsonObject {
    return addMetadata(x, "KeywordArguments_Expression.Default", jsonObject("optionalComma" to x.optionalComma.accept(this), "keywordArgumentList" to x.keywordArgumentList.accept(this)))
  }

  override fun visitKeywordArguments_ExpressionNone(x: KeywordArguments_Expression.None): JsonObject {
    return addMetadata(x, "KeywordArguments_Expression.None", jsonObject())
  }

  override fun visitKeywordFormalDefault(x: KeywordFormal.Default): JsonObject {
    return addMetadata(x, "KeywordFormal.Default", jsonObject("type" to x.type.accept(this), "name" to x.name.accept(this), "expression" to x.expression.accept(this)))
  }

  override fun visitKeywordFormalsDefault(x: KeywordFormals.Default): JsonObject {
    return addMetadata(x, "KeywordFormals.Default", jsonObject("optionalComma" to x.optionalComma.accept(this), "keywordFormalList" to x.keywordFormalList.accept(this)))
  }

  override fun visitKeywordFormalsNone(x: KeywordFormals.None): JsonObject {
    return addMetadata(x, "KeywordFormals.None", jsonObject())
  }

  override fun visitKindAlias(x: Kind.Alias): JsonObject {
    return addMetadata(x, "Kind.Alias", jsonObject())
  }

  override fun visitKindAll(x: Kind.All): JsonObject {
    return addMetadata(x, "Kind.All", jsonObject())
  }

  override fun visitKindAnno(x: Kind.Anno): JsonObject {
    return addMetadata(x, "Kind.Anno", jsonObject())
  }

  override fun visitKindData(x: Kind.Data): JsonObject {
    return addMetadata(x, "Kind.Data", jsonObject())
  }

  override fun visitKindFunction(x: Kind.Function): JsonObject {
    return addMetadata(x, "Kind.Function", jsonObject())
  }

  override fun visitKindModule(x: Kind.Module): JsonObject {
    return addMetadata(x, "Kind.Module", jsonObject())
  }

  override fun visitKindTag(x: Kind.Tag): JsonObject {
    return addMetadata(x, "Kind.Tag", jsonObject())
  }

  override fun visitKindVariable(x: Kind.Variable): JsonObject {
    return addMetadata(x, "Kind.Variable", jsonObject())
  }

  override fun visitKindView(x: Kind.View): JsonObject {
    return addMetadata(x, "Kind.View", jsonObject())
  }

  override fun visitLAYOUTLexical(x: LAYOUT.Lexical): JsonObject {
    return addMetadata(x, "LAYOUT.Lexical", jsonObject("string" to x.string))
  }

  override fun visitLabelDefault(x: Label.Default): JsonObject {
    return addMetadata(x, "Label.Default", jsonObject("name" to x.name.accept(this)))
  }

  override fun visitLabelEmpty(x: Label.Empty): JsonObject {
    return addMetadata(x, "Label.Empty", jsonObject())
  }

  override fun visitLiteralBoolean(x: Literal.Boolean): JsonObject {
    return addMetadata(x, "Literal.Boolean", jsonObject("booleanLiteral" to x.booleanLiteral.accept(this)))
  }

  override fun visitLiteralDateTime(x: Literal.DateTime): JsonObject {
    return addMetadata(x, "Literal.DateTime", jsonObject("dateTimeLiteral" to x.dateTimeLiteral.accept(this)))
  }

  override fun visitLiteralInteger(x: Literal.Integer): JsonObject {
    return addMetadata(x, "Literal.Integer", jsonObject("integerLiteral" to x.integerLiteral.accept(this)))
  }

  override fun visitLiteralLocation(x: Literal.Location): JsonObject {
    return addMetadata(x, "Literal.Location", jsonObject("locationLiteral" to x.locationLiteral.accept(this)))
  }

  override fun visitLiteralRational(x: Literal.Rational): JsonObject {
    return addMetadata(x, "Literal.Rational", jsonObject("rationalLiteral" to x.rationalLiteral.accept(this)))
  }

  override fun visitLiteralReal(x: Literal.Real): JsonObject {
    return addMetadata(x, "Literal.Real", jsonObject("realLiteral" to x.realLiteral.accept(this)))
  }

  override fun visitLiteralRegExp(x: Literal.RegExp): JsonObject {
    return addMetadata(x, "Literal.RegExp", jsonObject("regExpLiteral" to x.regExpLiteral.accept(this)))
  }

  override fun visitLiteralString(x: Literal.String): JsonObject {
    return addMetadata(x, "Literal.String", jsonObject("stringLiteral" to x.stringLiteral.accept(this)))
  }

  override fun visitLocalVariableDeclarationDefault(x: LocalVariableDeclaration.Default): JsonObject {
    return addMetadata(x, "LocalVariableDeclaration.Default", jsonObject("declarator" to x.declarator.accept(this)))
  }

  override fun visitLocalVariableDeclarationDynamic(x: LocalVariableDeclaration.Dynamic): JsonObject {
    return addMetadata(x, "LocalVariableDeclaration.Dynamic", jsonObject("declarator" to x.declarator.accept(this)))
  }

  override fun visitLocationLiteralDefault(x: LocationLiteral.Default): JsonObject {
    return addMetadata(x, "LocationLiteral.Default", jsonObject("protocolPart" to x.protocolPart.accept(this), "pathPart" to x.pathPart.accept(this)))
  }

  override fun visitMapping_ExpressionDefault(x: Mapping_Expression.Default): JsonObject {
    return addMetadata(x, "Mapping_Expression.Default", jsonObject("from" to x.from.accept(this), "to" to x.to.accept(this)))
  }

  override fun visitMidPathCharsLexical(x: MidPathChars.Lexical): JsonObject {
    return addMetadata(x, "MidPathChars.Lexical", jsonObject("string" to x.string))
  }

  override fun visitMidProtocolCharsLexical(x: MidProtocolChars.Lexical): JsonObject {
    return addMetadata(x, "MidProtocolChars.Lexical", jsonObject("string" to x.string))
  }

  override fun visitMidStringCharsLexical(x: MidStringChars.Lexical): JsonObject {
    return addMetadata(x, "MidStringChars.Lexical", jsonObject("string" to x.string))
  }

  override fun visitModuleDefault(x: Module.Default): JsonObject {
    return addMetadata(x, "Module.Default", jsonObject("header" to x.header.accept(this), "body" to x.body.accept(this)))
  }

  override fun visitModuleActualsDefault(x: ModuleActuals.Default): JsonObject {
    return addMetadata(x, "ModuleActuals.Default", jsonObject("types" to x.types.accept(this)))
  }

  override fun visitModuleParametersDefault(x: ModuleParameters.Default): JsonObject {
    return addMetadata(x, "ModuleParameters.Default", jsonObject("parameters" to x.parameters.accept(this)))
  }

  override fun visitNameLexical(x: Name.Lexical): JsonObject {
    return addMetadata(x, "Name.Lexical", jsonObject("string" to x.string))
  }

  override fun visitNamedBackslashLexical(x: NamedBackslash.Lexical): JsonObject {
    return addMetadata(x, "NamedBackslash.Lexical", jsonObject("string" to x.string))
  }

  override fun visitNamedRegExpLexical(x: NamedRegExp.Lexical): JsonObject {
    return addMetadata(x, "NamedRegExp.Lexical", jsonObject("string" to x.string))
  }

  override fun visitNonterminalLexical(x: Nonterminal.Lexical): JsonObject {
    return addMetadata(x, "Nonterminal.Lexical", jsonObject("string" to x.string))
  }

  override fun visitNonterminalLabelLexical(x: NonterminalLabel.Lexical): JsonObject {
    return addMetadata(x, "NonterminalLabel.Lexical", jsonObject("string" to x.string))
  }

  override fun visitOctalIntegerLiteralLexical(x: OctalIntegerLiteral.Lexical): JsonObject {
    return addMetadata(x, "OctalIntegerLiteral.Lexical", jsonObject("string" to x.string))
  }

  override fun visitOptionalCommaLexical(x: OptionalComma.Lexical): JsonObject {
    return addMetadata(x, "OptionalComma.Lexical", jsonObject("string" to x.string))
  }

  override fun visitOptionalExpressionExpression(x: OptionalExpression.Expression): JsonObject {
    return addMetadata(x, "OptionalExpression.Expression", jsonObject("expression" to x.expression.accept(this)))
  }

  override fun visitOptionalExpressionNoExpression(x: OptionalExpression.NoExpression): JsonObject {
    return addMetadata(x, "OptionalExpression.NoExpression", jsonObject())
  }

  override fun visitOutputLexical(x: Output.Lexical): JsonObject {
    return addMetadata(x, "Output.Lexical", jsonObject("string" to x.string))
  }

  override fun visitParametersDefault(x: Parameters.Default): JsonObject {
    return addMetadata(x, "Parameters.Default", jsonObject("formals" to x.formals.accept(this), "keywordFormals" to x.keywordFormals.accept(this)))
  }

  override fun visitParametersVarArgs(x: Parameters.VarArgs): JsonObject {
    return addMetadata(x, "Parameters.VarArgs", jsonObject("formals" to x.formals.accept(this), "keywordFormals" to x.keywordFormals.accept(this)))
  }

  override fun visitPathCharsLexical(x: PathChars.Lexical): JsonObject {
    return addMetadata(x, "PathChars.Lexical", jsonObject("string" to x.string))
  }

  override fun visitPathPartInterpolated(x: PathPart.Interpolated): JsonObject {
    return addMetadata(x, "PathPart.Interpolated", jsonObject("pre" to x.pre.accept(this), "expression" to x.expression.accept(this), "tail" to x.tail.accept(this)))
  }

  override fun visitPathPartNonInterpolated(x: PathPart.NonInterpolated): JsonObject {
    return addMetadata(x, "PathPart.NonInterpolated", jsonObject("pathChars" to x.pathChars.accept(this)))
  }

  override fun visitPathTailMid(x: PathTail.Mid): JsonObject {
    return addMetadata(x, "PathTail.Mid", jsonObject("mid" to x.mid.accept(this), "expression" to x.expression.accept(this), "tail" to x.tail.accept(this)))
  }

  override fun visitPathTailPost(x: PathTail.Post): JsonObject {
    return addMetadata(x, "PathTail.Post", jsonObject("post" to x.post.accept(this)))
  }

  override fun visitPatternWithActionArbitrary(x: PatternWithAction.Arbitrary): JsonObject {
    return addMetadata(x, "PatternWithAction.Arbitrary", jsonObject("pattern" to x.pattern.accept(this), "statement" to x.statement.accept(this)))
  }

  override fun visitPatternWithActionReplacing(x: PatternWithAction.Replacing): JsonObject {
    return addMetadata(x, "PatternWithAction.Replacing", jsonObject("pattern" to x.pattern.accept(this), "replacement" to x.replacement.accept(this)))
  }

  override fun visitPostPathCharsLexical(x: PostPathChars.Lexical): JsonObject {
    return addMetadata(x, "PostPathChars.Lexical", jsonObject("string" to x.string))
  }

  override fun visitPostProtocolCharsLexical(x: PostProtocolChars.Lexical): JsonObject {
    return addMetadata(x, "PostProtocolChars.Lexical", jsonObject("string" to x.string))
  }

  override fun visitPostStringCharsLexical(x: PostStringChars.Lexical): JsonObject {
    return addMetadata(x, "PostStringChars.Lexical", jsonObject("string" to x.string))
  }

  override fun visitPrePathCharsLexical(x: PrePathChars.Lexical): JsonObject {
    return addMetadata(x, "PrePathChars.Lexical", jsonObject("string" to x.string))
  }

  override fun visitPreProtocolCharsLexical(x: PreProtocolChars.Lexical): JsonObject {
    return addMetadata(x, "PreProtocolChars.Lexical", jsonObject("string" to x.string))
  }

  override fun visitPreStringCharsLexical(x: PreStringChars.Lexical): JsonObject {
    return addMetadata(x, "PreStringChars.Lexical", jsonObject("string" to x.string))
  }

  override fun visitProdAll(x: Prod.All): JsonObject {
    return addMetadata(x, "Prod.All", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitProdAssociativityGroup(x: Prod.AssociativityGroup): JsonObject {
    return addMetadata(x, "Prod.AssociativityGroup", jsonObject("associativity" to x.associativity.accept(this), "group" to x.group.accept(this)))
  }

  override fun visitProdFirst(x: Prod.First): JsonObject {
    return addMetadata(x, "Prod.First", jsonObject("lhs" to x.lhs.accept(this), "rhs" to x.rhs.accept(this)))
  }

  override fun visitProdLabeled(x: Prod.Labeled): JsonObject {
    return addMetadata(x, "Prod.Labeled", jsonObject("modifiers" to x.modifiers.accept(this), "name" to x.name.accept(this), "syms" to x.syms.accept(this)))
  }

  override fun visitProdReference(x: Prod.Reference): JsonObject {
    return addMetadata(x, "Prod.Reference", jsonObject("referenced" to x.referenced.accept(this)))
  }

  override fun visitProdUnlabeled(x: Prod.Unlabeled): JsonObject {
    return addMetadata(x, "Prod.Unlabeled", jsonObject("modifiers" to x.modifiers.accept(this), "syms" to x.syms.accept(this)))
  }

  override fun visitProdModifierAssociativity(x: ProdModifier.Associativity): JsonObject {
    return addMetadata(x, "ProdModifier.Associativity", jsonObject("associativity" to x.associativity.accept(this)))
  }

  override fun visitProdModifierBracket(x: ProdModifier.Bracket): JsonObject {
    return addMetadata(x, "ProdModifier.Bracket", jsonObject())
  }

  override fun visitProdModifierTag(x: ProdModifier.Tag): JsonObject {
    return addMetadata(x, "ProdModifier.Tag", jsonObject("tag" to x.tag.accept(this)))
  }

  override fun visitProtocolCharsLexical(x: ProtocolChars.Lexical): JsonObject {
    return addMetadata(x, "ProtocolChars.Lexical", jsonObject("string" to x.string))
  }

  override fun visitProtocolPartInterpolated(x: ProtocolPart.Interpolated): JsonObject {
    return addMetadata(x, "ProtocolPart.Interpolated", jsonObject("pre" to x.pre.accept(this), "expression" to x.expression.accept(this), "tail" to x.tail.accept(this)))
  }

  override fun visitProtocolPartNonInterpolated(x: ProtocolPart.NonInterpolated): JsonObject {
    return addMetadata(x, "ProtocolPart.NonInterpolated", jsonObject("protocolChars" to x.protocolChars.accept(this)))
  }

  override fun visitProtocolTailMid(x: ProtocolTail.Mid): JsonObject {
    return addMetadata(x, "ProtocolTail.Mid", jsonObject("mid" to x.mid.accept(this), "expression" to x.expression.accept(this), "tail" to x.tail.accept(this)))
  }

  override fun visitProtocolTailPost(x: ProtocolTail.Post): JsonObject {
    return addMetadata(x, "ProtocolTail.Post", jsonObject("post" to x.post.accept(this)))
  }

  override fun visitQualifiedNameDefault(x: QualifiedName.Default): JsonObject {
    return addMetadata(x, "QualifiedName.Default", jsonObject("names" to x.names.accept(this)))
  }

  override fun visitRangeCharacter(x: Range.Character): JsonObject {
    return addMetadata(x, "Range.Character", jsonObject("character" to x.character.accept(this)))
  }

  override fun visitRangeFromTo(x: Range.FromTo): JsonObject {
    return addMetadata(x, "Range.FromTo", jsonObject("start" to x.start.accept(this), "end" to x.end.accept(this)))
  }

  override fun visitRationalLiteralLexical(x: RationalLiteral.Lexical): JsonObject {
    return addMetadata(x, "RationalLiteral.Lexical", jsonObject("string" to x.string))
  }

  override fun visitRealLiteralLexical(x: RealLiteral.Lexical): JsonObject {
    return addMetadata(x, "RealLiteral.Lexical", jsonObject("string" to x.string))
  }

  override fun visitRegExpLexical(x: RegExp.Lexical): JsonObject {
    return addMetadata(x, "RegExp.Lexical", jsonObject("string" to x.string))
  }

  override fun visitRegExpLiteralLexical(x: RegExpLiteral.Lexical): JsonObject {
    return addMetadata(x, "RegExpLiteral.Lexical", jsonObject("string" to x.string))
  }

  override fun visitRegExpModifierLexical(x: RegExpModifier.Lexical): JsonObject {
    return addMetadata(x, "RegExpModifier.Lexical", jsonObject("string" to x.string))
  }

  override fun visitRenamingDefault(x: Renaming.Default): JsonObject {
    return addMetadata(x, "Renaming.Default", jsonObject("from" to x.from.accept(this), "to" to x.to.accept(this)))
  }

  override fun visitRenamingsDefault(x: Renamings.Default): JsonObject {
    return addMetadata(x, "Renamings.Default", jsonObject("renamings" to x.renamings.accept(this)))
  }

  override fun visitReplacementConditional(x: Replacement.Conditional): JsonObject {
    return addMetadata(x, "Replacement.Conditional", jsonObject("replacementExpression" to x.replacementExpression.accept(this), "conditions" to x.conditions.accept(this)))
  }

  override fun visitReplacementUnconditional(x: Replacement.Unconditional): JsonObject {
    return addMetadata(x, "Replacement.Unconditional", jsonObject("replacementExpression" to x.replacementExpression.accept(this)))
  }

  override fun visitShellCommandClear(x: ShellCommand.Clear): JsonObject {
    return addMetadata(x, "ShellCommand.Clear", jsonObject())
  }

  override fun visitShellCommandEdit(x: ShellCommand.Edit): JsonObject {
    return addMetadata(x, "ShellCommand.Edit", jsonObject("name" to x.name.accept(this)))
  }

  override fun visitShellCommandHelp(x: ShellCommand.Help): JsonObject {
    return addMetadata(x, "ShellCommand.Help", jsonObject())
  }

  override fun visitShellCommandHistory(x: ShellCommand.History): JsonObject {
    return addMetadata(x, "ShellCommand.History", jsonObject())
  }

  override fun visitShellCommandListDeclarations(x: ShellCommand.ListDeclarations): JsonObject {
    return addMetadata(x, "ShellCommand.ListDeclarations", jsonObject())
  }

  override fun visitShellCommandListModules(x: ShellCommand.ListModules): JsonObject {
    return addMetadata(x, "ShellCommand.ListModules", jsonObject())
  }

  override fun visitShellCommandQuit(x: ShellCommand.Quit): JsonObject {
    return addMetadata(x, "ShellCommand.Quit", jsonObject())
  }

  override fun visitShellCommandSetOption(x: ShellCommand.SetOption): JsonObject {
    return addMetadata(x, "ShellCommand.SetOption", jsonObject("name" to x.name.accept(this), "expression" to x.expression.accept(this)))
  }

  override fun visitShellCommandTest(x: ShellCommand.Test): JsonObject {
    return addMetadata(x, "ShellCommand.Test", jsonObject())
  }

  override fun visitShellCommandUndeclare(x: ShellCommand.Undeclare): JsonObject {
    return addMetadata(x, "ShellCommand.Undeclare", jsonObject("name" to x.name.accept(this)))
  }

  override fun visitShellCommandUnimport(x: ShellCommand.Unimport): JsonObject {
    return addMetadata(x, "ShellCommand.Unimport", jsonObject("name" to x.name.accept(this)))
  }

  override fun visitSignatureNoThrows(x: Signature.NoThrows): JsonObject {
    return addMetadata(x, "Signature.NoThrows", jsonObject("modifiers" to x.modifiers.accept(this), "type" to x.type.accept(this), "name" to x.name.accept(this), "parameters" to x.parameters.accept(this)))
  }

  override fun visitSignatureWithThrows(x: Signature.WithThrows): JsonObject {
    return addMetadata(x, "Signature.WithThrows", jsonObject("modifiers" to x.modifiers.accept(this), "type" to x.type.accept(this), "name" to x.name.accept(this), "parameters" to x.parameters.accept(this), "exceptions" to x.exceptions.accept(this)))
  }

  override fun visitStartAbsent(x: Start.Absent): JsonObject {
    return addMetadata(x, "Start.Absent", jsonObject())
  }

  override fun visitStartPresent(x: Start.Present): JsonObject {
    return addMetadata(x, "Start.Present", jsonObject())
  }

  override fun visitStatementAppend(x: Statement.Append): JsonObject {
    return addMetadata(x, "Statement.Append", jsonObject("dataTarget" to x.dataTarget.accept(this), "statement" to x.statement.accept(this)))
  }

  override fun visitStatementAssert(x: Statement.Assert): JsonObject {
    return addMetadata(x, "Statement.Assert", jsonObject("expression" to x.expression.accept(this)))
  }

  override fun visitStatementAssertWithMessage(x: Statement.AssertWithMessage): JsonObject {
    return addMetadata(x, "Statement.AssertWithMessage", jsonObject("expression" to x.expression.accept(this), "message" to x.message.accept(this)))
  }

  override fun visitStatementAssignment(x: Statement.Assignment): JsonObject {
    return addMetadata(x, "Statement.Assignment", jsonObject("assignable" to x.assignable.accept(this), "operator" to x.operator.accept(this), "statement" to x.statement.accept(this)))
  }

  override fun visitStatementBreak(x: Statement.Break): JsonObject {
    return addMetadata(x, "Statement.Break", jsonObject("target" to x.target.accept(this)))
  }

  override fun visitStatementContinue(x: Statement.Continue): JsonObject {
    return addMetadata(x, "Statement.Continue", jsonObject("target" to x.target.accept(this)))
  }

  override fun visitStatementDoWhile(x: Statement.DoWhile): JsonObject {
    return addMetadata(x, "Statement.DoWhile", jsonObject("label" to x.label.accept(this), "body" to x.body.accept(this), "condition" to x.condition.accept(this)))
  }

  override fun visitStatementEmptyStatement(x: Statement.EmptyStatement): JsonObject {
    return addMetadata(x, "Statement.EmptyStatement", jsonObject())
  }

  override fun visitStatementExpression(x: Statement.Expression): JsonObject {
    return addMetadata(x, "Statement.Expression", jsonObject("expression" to x.expression.accept(this)))
  }

  override fun visitStatementFail(x: Statement.Fail): JsonObject {
    return addMetadata(x, "Statement.Fail", jsonObject("target" to x.target.accept(this)))
  }

  override fun visitStatementFilter(x: Statement.Filter): JsonObject {
    return addMetadata(x, "Statement.Filter", jsonObject())
  }

  override fun visitStatementFor(x: Statement.For): JsonObject {
    return addMetadata(x, "Statement.For", jsonObject("label" to x.label.accept(this), "generators" to x.generators.accept(this), "body" to x.body.accept(this)))
  }

  override fun visitStatementFunctionDeclaration(x: Statement.FunctionDeclaration): JsonObject {
    return addMetadata(x, "Statement.FunctionDeclaration", jsonObject("functionDeclaration" to x.functionDeclaration.accept(this)))
  }

  override fun visitStatementGlobalDirective(x: Statement.GlobalDirective): JsonObject {
    return addMetadata(x, "Statement.GlobalDirective", jsonObject("type" to x.type.accept(this), "names" to x.names.accept(this)))
  }

  override fun visitStatementIfThen(x: Statement.IfThen): JsonObject {
    return addMetadata(x, "Statement.IfThen", jsonObject("label" to x.label.accept(this), "conditions" to x.conditions.accept(this), "thenStatement" to x.thenStatement.accept(this)))
  }

  override fun visitStatementIfThenElse(x: Statement.IfThenElse): JsonObject {
    return addMetadata(x, "Statement.IfThenElse", jsonObject("label" to x.label.accept(this), "conditions" to x.conditions.accept(this), "thenStatement" to x.thenStatement.accept(this), "elseStatement" to x.elseStatement.accept(this)))
  }

  override fun visitStatementInsert(x: Statement.Insert): JsonObject {
    return addMetadata(x, "Statement.Insert", jsonObject("dataTarget" to x.dataTarget.accept(this), "statement" to x.statement.accept(this)))
  }

  override fun visitStatementNonEmptyBlock(x: Statement.NonEmptyBlock): JsonObject {
    return addMetadata(x, "Statement.NonEmptyBlock", jsonObject("label" to x.label.accept(this), "statements" to x.statements.accept(this)))
  }

  override fun visitStatementReturn(x: Statement.Return): JsonObject {
    return addMetadata(x, "Statement.Return", jsonObject("statement" to x.statement.accept(this)))
  }

  override fun visitStatementSolve(x: Statement.Solve): JsonObject {
    return addMetadata(x, "Statement.Solve", jsonObject("variables" to x.variables.accept(this), "bound" to x.bound.accept(this), "body" to x.body.accept(this)))
  }

  override fun visitStatementSwitch(x: Statement.Switch): JsonObject {
    return addMetadata(x, "Statement.Switch", jsonObject("label" to x.label.accept(this), "expression" to x.expression.accept(this), "cases" to x.cases.accept(this)))
  }

  override fun visitStatementThrow(x: Statement.Throw): JsonObject {
    return addMetadata(x, "Statement.Throw", jsonObject("statement" to x.statement.accept(this)))
  }

  override fun visitStatementTry(x: Statement.Try): JsonObject {
    return addMetadata(x, "Statement.Try", jsonObject("body" to x.body.accept(this), "handlers" to x.handlers.accept(this)))
  }

  override fun visitStatementTryFinally(x: Statement.TryFinally): JsonObject {
    return addMetadata(x, "Statement.TryFinally", jsonObject("body" to x.body.accept(this), "handlers" to x.handlers.accept(this), "finallyBody" to x.finallyBody.accept(this)))
  }

  override fun visitStatementVariableDeclaration(x: Statement.VariableDeclaration): JsonObject {
    return addMetadata(x, "Statement.VariableDeclaration", jsonObject("declaration" to x.declaration.accept(this)))
  }

  override fun visitStatementVisit(x: Statement.Visit): JsonObject {
    return addMetadata(x, "Statement.Visit", jsonObject("label" to x.label.accept(this), "visit" to x.visit.accept(this)))
  }

  override fun visitStatementWhile(x: Statement.While): JsonObject {
    return addMetadata(x, "Statement.While", jsonObject("label" to x.label.accept(this), "conditions" to x.conditions.accept(this), "body" to x.body.accept(this)))
  }

  override fun visitStrategyBottomUp(x: Strategy.BottomUp): JsonObject {
    return addMetadata(x, "Strategy.BottomUp", jsonObject())
  }

  override fun visitStrategyBottomUpBreak(x: Strategy.BottomUpBreak): JsonObject {
    return addMetadata(x, "Strategy.BottomUpBreak", jsonObject())
  }

  override fun visitStrategyInnermost(x: Strategy.Innermost): JsonObject {
    return addMetadata(x, "Strategy.Innermost", jsonObject())
  }

  override fun visitStrategyOutermost(x: Strategy.Outermost): JsonObject {
    return addMetadata(x, "Strategy.Outermost", jsonObject())
  }

  override fun visitStrategyTopDown(x: Strategy.TopDown): JsonObject {
    return addMetadata(x, "Strategy.TopDown", jsonObject())
  }

  override fun visitStrategyTopDownBreak(x: Strategy.TopDownBreak): JsonObject {
    return addMetadata(x, "Strategy.TopDownBreak", jsonObject())
  }

  override fun visitStringCharacterLexical(x: StringCharacter.Lexical): JsonObject {
    return addMetadata(x, "StringCharacter.Lexical", jsonObject("string" to x.string))
  }

  override fun visitStringConstantLexical(x: StringConstant.Lexical): JsonObject {
    return addMetadata(x, "StringConstant.Lexical", jsonObject("string" to x.string))
  }

  override fun visitStringLiteralInterpolated(x: StringLiteral.Interpolated): JsonObject {
    return addMetadata(x, "StringLiteral.Interpolated", jsonObject("pre" to x.pre.accept(this), "expression" to x.expression.accept(this), "tail" to x.tail.accept(this)))
  }

  override fun visitStringLiteralNonInterpolated(x: StringLiteral.NonInterpolated): JsonObject {
    return addMetadata(x, "StringLiteral.NonInterpolated", jsonObject("constant" to x.constant.accept(this)))
  }

  override fun visitStringLiteralTemplate(x: StringLiteral.Template): JsonObject {
    return addMetadata(x, "StringLiteral.Template", jsonObject("pre" to x.pre.accept(this), "template" to x.template.accept(this), "tail" to x.tail.accept(this)))
  }

  override fun visitStringMiddleInterpolated(x: StringMiddle.Interpolated): JsonObject {
    return addMetadata(x, "StringMiddle.Interpolated", jsonObject("mid" to x.mid.accept(this), "expression" to x.expression.accept(this), "tail" to x.tail.accept(this)))
  }

  override fun visitStringMiddleMid(x: StringMiddle.Mid): JsonObject {
    return addMetadata(x, "StringMiddle.Mid", jsonObject("mid" to x.mid.accept(this)))
  }

  override fun visitStringMiddleTemplate(x: StringMiddle.Template): JsonObject {
    return addMetadata(x, "StringMiddle.Template", jsonObject("mid" to x.mid.accept(this), "template" to x.template.accept(this), "tail" to x.tail.accept(this)))
  }

  override fun visitStringTailMidInterpolated(x: StringTail.MidInterpolated): JsonObject {
    return addMetadata(x, "StringTail.MidInterpolated", jsonObject("mid" to x.mid.accept(this), "expression" to x.expression.accept(this), "tail" to x.tail.accept(this)))
  }

  override fun visitStringTailMidTemplate(x: StringTail.MidTemplate): JsonObject {
    return addMetadata(x, "StringTail.MidTemplate", jsonObject("mid" to x.mid.accept(this), "template" to x.template.accept(this), "tail" to x.tail.accept(this)))
  }

  override fun visitStringTailPost(x: StringTail.Post): JsonObject {
    return addMetadata(x, "StringTail.Post", jsonObject("post" to x.post.accept(this)))
  }

  override fun visitStringTemplateDoWhile(x: StringTemplate.DoWhile): JsonObject {
    return addMetadata(x, "StringTemplate.DoWhile", jsonObject("preStats" to x.preStats.accept(this), "body" to x.body.accept(this), "postStats" to x.postStats.accept(this), "condition" to x.condition.accept(this)))
  }

  override fun visitStringTemplateFor(x: StringTemplate.For): JsonObject {
    return addMetadata(x, "StringTemplate.For", jsonObject("generators" to x.generators.accept(this), "preStats" to x.preStats.accept(this), "body" to x.body.accept(this), "postStats" to x.postStats.accept(this)))
  }

  override fun visitStringTemplateIfThen(x: StringTemplate.IfThen): JsonObject {
    return addMetadata(x, "StringTemplate.IfThen", jsonObject("conditions" to x.conditions.accept(this), "preStats" to x.preStats.accept(this), "body" to x.body.accept(this), "postStats" to x.postStats.accept(this)))
  }

  override fun visitStringTemplateIfThenElse(x: StringTemplate.IfThenElse): JsonObject {
    return addMetadata(x, "StringTemplate.IfThenElse", jsonObject("conditions" to x.conditions.accept(this), "preStatsThen" to x.preStatsThen.accept(this), "thenString" to x.thenString.accept(this), "postStatsThen" to x.postStatsThen.accept(this), "preStatsElse" to x.preStatsElse.accept(this), "elseString" to x.elseString.accept(this), "postStatsElse" to x.postStatsElse.accept(this)))
  }

  override fun visitStringTemplateWhile(x: StringTemplate.While): JsonObject {
    return addMetadata(x, "StringTemplate.While", jsonObject("condition" to x.condition.accept(this), "preStats" to x.preStats.accept(this), "body" to x.body.accept(this), "postStats" to x.postStats.accept(this)))
  }

  override fun visitStructuredTypeDefault(x: StructuredType.Default): JsonObject {
    return addMetadata(x, "StructuredType.Default", jsonObject("basicType" to x.basicType.accept(this), "arguments" to x.arguments.accept(this)))
  }

  override fun visitSymAlternative(x: Sym.Alternative): JsonObject {
    return addMetadata(x, "Sym.Alternative", jsonObject("first" to x.first.accept(this), "alternatives" to x.alternatives.accept(this)))
  }

  override fun visitSymCaseInsensitiveLiteral(x: Sym.CaseInsensitiveLiteral): JsonObject {
    return addMetadata(x, "Sym.CaseInsensitiveLiteral", jsonObject("cistring" to x.cistring.accept(this)))
  }

  override fun visitSymCharacterClass(x: Sym.CharacterClass): JsonObject {
    return addMetadata(x, "Sym.CharacterClass", jsonObject("charClass" to x.charClass.accept(this)))
  }

  override fun visitSymColumn(x: Sym.Column): JsonObject {
    return addMetadata(x, "Sym.Column", jsonObject("symbol" to x.symbol.accept(this), "column" to x.column.accept(this)))
  }

  override fun visitSymEmpty(x: Sym.Empty): JsonObject {
    return addMetadata(x, "Sym.Empty", jsonObject())
  }

  override fun visitSymEndOfLine(x: Sym.EndOfLine): JsonObject {
    return addMetadata(x, "Sym.EndOfLine", jsonObject("symbol" to x.symbol.accept(this)))
  }

  override fun visitSymExcept(x: Sym.Except): JsonObject {
    return addMetadata(x, "Sym.Except", jsonObject("symbol" to x.symbol.accept(this), "label" to x.label.accept(this)))
  }

  override fun visitSymFollow(x: Sym.Follow): JsonObject {
    return addMetadata(x, "Sym.Follow", jsonObject("symbol" to x.symbol.accept(this), "match" to x.match.accept(this)))
  }

  override fun visitSymIter(x: Sym.Iter): JsonObject {
    return addMetadata(x, "Sym.Iter", jsonObject("symbol" to x.symbol.accept(this)))
  }

  override fun visitSymIterSep(x: Sym.IterSep): JsonObject {
    return addMetadata(x, "Sym.IterSep", jsonObject("symbol" to x.symbol.accept(this), "sep" to x.sep.accept(this)))
  }

  override fun visitSymIterStar(x: Sym.IterStar): JsonObject {
    return addMetadata(x, "Sym.IterStar", jsonObject("symbol" to x.symbol.accept(this)))
  }

  override fun visitSymIterStarSep(x: Sym.IterStarSep): JsonObject {
    return addMetadata(x, "Sym.IterStarSep", jsonObject("symbol" to x.symbol.accept(this), "sep" to x.sep.accept(this)))
  }

  override fun visitSymLabeled(x: Sym.Labeled): JsonObject {
    return addMetadata(x, "Sym.Labeled", jsonObject("symbol" to x.symbol.accept(this), "label" to x.label.accept(this)))
  }

  override fun visitSymLiteral(x: Sym.Literal): JsonObject {
    return addMetadata(x, "Sym.Literal", jsonObject("string" to x.string.accept(this)))
  }

  override fun visitSymNonterminal(x: Sym.Nonterminal): JsonObject {
    return addMetadata(x, "Sym.Nonterminal", jsonObject("nonterminal" to x.nonterminal.accept(this)))
  }

  override fun visitSymNotFollow(x: Sym.NotFollow): JsonObject {
    return addMetadata(x, "Sym.NotFollow", jsonObject("symbol" to x.symbol.accept(this), "match" to x.match.accept(this)))
  }

  override fun visitSymNotPrecede(x: Sym.NotPrecede): JsonObject {
    return addMetadata(x, "Sym.NotPrecede", jsonObject("match" to x.match.accept(this), "symbol" to x.symbol.accept(this)))
  }

  override fun visitSymOptional(x: Sym.Optional): JsonObject {
    return addMetadata(x, "Sym.Optional", jsonObject("symbol" to x.symbol.accept(this)))
  }

  override fun visitSymParameter(x: Sym.Parameter): JsonObject {
    return addMetadata(x, "Sym.Parameter", jsonObject("nonterminal" to x.nonterminal.accept(this)))
  }

  override fun visitSymParametrized(x: Sym.Parametrized): JsonObject {
    return addMetadata(x, "Sym.Parametrized", jsonObject("nonterminal" to x.nonterminal.accept(this), "parameters" to x.parameters.accept(this)))
  }

  override fun visitSymPrecede(x: Sym.Precede): JsonObject {
    return addMetadata(x, "Sym.Precede", jsonObject("match" to x.match.accept(this), "symbol" to x.symbol.accept(this)))
  }

  override fun visitSymSequence(x: Sym.Sequence): JsonObject {
    return addMetadata(x, "Sym.Sequence", jsonObject("first" to x.first.accept(this), "sequence" to x.sequence.accept(this)))
  }

  override fun visitSymStart(x: Sym.Start): JsonObject {
    return addMetadata(x, "Sym.Start", jsonObject("nonterminal" to x.nonterminal.accept(this)))
  }

  override fun visitSymStartOfLine(x: Sym.StartOfLine): JsonObject {
    return addMetadata(x, "Sym.StartOfLine", jsonObject("symbol" to x.symbol.accept(this)))
  }

  override fun visitSymUnequal(x: Sym.Unequal): JsonObject {
    return addMetadata(x, "Sym.Unequal", jsonObject("symbol" to x.symbol.accept(this), "match" to x.match.accept(this)))
  }

  override fun visitSyntaxDefinitionKeyword(x: SyntaxDefinition.Keyword): JsonObject {
    return addMetadata(x, "SyntaxDefinition.Keyword", jsonObject("defined" to x.defined.accept(this), "production" to x.production.accept(this)))
  }

  override fun visitSyntaxDefinitionLanguage(x: SyntaxDefinition.Language): JsonObject {
    return addMetadata(x, "SyntaxDefinition.Language", jsonObject("start" to x.start.accept(this), "defined" to x.defined.accept(this), "production" to x.production.accept(this)))
  }

  override fun visitSyntaxDefinitionLayout(x: SyntaxDefinition.Layout): JsonObject {
    return addMetadata(x, "SyntaxDefinition.Layout", jsonObject("vis" to x.vis.accept(this), "defined" to x.defined.accept(this), "production" to x.production.accept(this)))
  }

  override fun visitSyntaxDefinitionLexical(x: SyntaxDefinition.Lexical): JsonObject {
    return addMetadata(x, "SyntaxDefinition.Lexical", jsonObject("defined" to x.defined.accept(this), "production" to x.production.accept(this)))
  }

  override fun visitTagDefault(x: Tag.Default): JsonObject {
    return addMetadata(x, "Tag.Default", jsonObject("name" to x.name.accept(this), "contents" to x.contents.accept(this)))
  }

  override fun visitTagEmpty(x: Tag.Empty): JsonObject {
    return addMetadata(x, "Tag.Empty", jsonObject("name" to x.name.accept(this)))
  }

  override fun visitTagExpression(x: Tag.Expression): JsonObject {
    return addMetadata(x, "Tag.Expression", jsonObject("name" to x.name.accept(this), "expression" to x.expression.accept(this)))
  }

  override fun visitTagStringLexical(x: TagString.Lexical): JsonObject {
    return addMetadata(x, "TagString.Lexical", jsonObject("string" to x.string))
  }

  override fun visitTagsDefault(x: Tags.Default): JsonObject {
    return addMetadata(x, "Tags.Default", jsonObject("tags" to x.tags.accept(this)))
  }

  override fun visitTargetEmpty(x: Target.Empty): JsonObject {
    return addMetadata(x, "Target.Empty", jsonObject())
  }

  override fun visitTargetLabeled(x: Target.Labeled): JsonObject {
    return addMetadata(x, "Target.Labeled", jsonObject("name" to x.name.accept(this)))
  }

  override fun visitTimePartNoTZLexical(x: TimePartNoTZ.Lexical): JsonObject {
    return addMetadata(x, "TimePartNoTZ.Lexical", jsonObject("string" to x.string))
  }

  override fun visitTimeZonePartLexical(x: TimeZonePart.Lexical): JsonObject {
    return addMetadata(x, "TimeZonePart.Lexical", jsonObject("string" to x.string))
  }

  override fun visitToplevelGivenVisibility(x: Toplevel.GivenVisibility): JsonObject {
    return addMetadata(x, "Toplevel.GivenVisibility", jsonObject("declaration" to x.declaration.accept(this)))
  }

  override fun visitTypeBasic(x: Type.Basic): JsonObject {
    return addMetadata(x, "Type.Basic", jsonObject("basic" to x.basic.accept(this)))
  }

  override fun visitTypeBracket(x: Type.Bracket): JsonObject {
    return addMetadata(x, "Type.Bracket", jsonObject("type" to x.type.accept(this)))
  }

  override fun visitTypeFunction(x: Type.Function): JsonObject {
    return addMetadata(x, "Type.Function", jsonObject("function" to x.function.accept(this)))
  }

  override fun visitTypeSelector(x: Type.Selector): JsonObject {
    return addMetadata(x, "Type.Selector", jsonObject("selector" to x.selector.accept(this)))
  }

  override fun visitTypeStructured(x: Type.Structured): JsonObject {
    return addMetadata(x, "Type.Structured", jsonObject("structured" to x.structured.accept(this)))
  }

  override fun visitTypeSymbol(x: Type.Symbol): JsonObject {
    return addMetadata(x, "Type.Symbol", jsonObject("symbol" to x.symbol.accept(this)))
  }

  override fun visitTypeUser(x: Type.User): JsonObject {
    return addMetadata(x, "Type.User", jsonObject("user" to x.user.accept(this)))
  }

  override fun visitTypeVariable(x: Type.Variable): JsonObject {
    return addMetadata(x, "Type.Variable", jsonObject("typeVar" to x.typeVar.accept(this)))
  }

  override fun visitTypeArgDefault(x: TypeArg.Default): JsonObject {
    return addMetadata(x, "TypeArg.Default", jsonObject("type" to x.type.accept(this)))
  }

  override fun visitTypeArgNamed(x: TypeArg.Named): JsonObject {
    return addMetadata(x, "TypeArg.Named", jsonObject("type" to x.type.accept(this), "name" to x.name.accept(this)))
  }

  override fun visitTypeVarBounded(x: TypeVar.Bounded): JsonObject {
    return addMetadata(x, "TypeVar.Bounded", jsonObject("name" to x.name.accept(this), "bound" to x.bound.accept(this)))
  }

  override fun visitTypeVarFree(x: TypeVar.Free): JsonObject {
    return addMetadata(x, "TypeVar.Free", jsonObject("name" to x.name.accept(this)))
  }

  override fun visitURLCharsLexical(x: URLChars.Lexical): JsonObject {
    return addMetadata(x, "URLChars.Lexical", jsonObject("string" to x.string))
  }

  override fun visitUnicodeEscapeLexical(x: UnicodeEscape.Lexical): JsonObject {
    return addMetadata(x, "UnicodeEscape.Lexical", jsonObject("string" to x.string))
  }

  override fun visitUserTypeName(x: UserType.Name): JsonObject {
    return addMetadata(x, "UserType.Name", jsonObject("name" to x.name.accept(this)))
  }

  override fun visitUserTypeParametric(x: UserType.Parametric): JsonObject {
    return addMetadata(x, "UserType.Parametric", jsonObject("name" to x.name.accept(this), "parameters" to x.parameters.accept(this)))
  }

  override fun visitVariableInitialized(x: Variable.Initialized): JsonObject {
    return addMetadata(x, "Variable.Initialized", jsonObject("name" to x.name.accept(this), "initial" to x.initial.accept(this)))
  }

  override fun visitVariableUnInitialized(x: Variable.UnInitialized): JsonObject {
    return addMetadata(x, "Variable.UnInitialized", jsonObject("name" to x.name.accept(this)))
  }

  override fun visitVariantNAryConstructor(x: Variant.NAryConstructor): JsonObject {
    return addMetadata(x, "Variant.NAryConstructor", jsonObject("name" to x.name.accept(this), "arguments" to x.arguments.accept(this), "keywordArguments" to x.keywordArguments.accept(this)))
  }

  override fun visitVisibilityDefault(x: Visibility.Default): JsonObject {
    return addMetadata(x, "Visibility.Default", jsonObject())
  }

  override fun visitVisibilityPrivate(x: Visibility.Private): JsonObject {
    return addMetadata(x, "Visibility.Private", jsonObject())
  }

  override fun visitVisibilityPublic(x: Visibility.Public): JsonObject {
    return addMetadata(x, "Visibility.Public", jsonObject())
  }

  override fun visitVisitDefaultStrategy(x: Visit.DefaultStrategy): JsonObject {
    return addMetadata(x, "Visit.DefaultStrategy", jsonObject("subject" to x.subject.accept(this), "cases" to x.cases.accept(this)))
  }

  override fun visitVisitGivenStrategy(x: Visit.GivenStrategy): JsonObject {
    return addMetadata(x, "Visit.GivenStrategy", jsonObject("strategy" to x.strategy.accept(this), "subject" to x.subject.accept(this), "cases" to x.cases.accept(this)))
  }

  private fun addMetadata(x: AbstractAST, type: String, content: JsonObject): JsonObject {
    content["_type"] = type
    content["_start"] = x.location.offset
    content["_end"] = x.location.offset + x.location.length
    return content
  }

  private fun List<AbstractAST>.accept(visitor: IASTVisitor<*>): JsonArray {
    return this.map { it.accept(visitor) }.toJsonArray()
  }
}
